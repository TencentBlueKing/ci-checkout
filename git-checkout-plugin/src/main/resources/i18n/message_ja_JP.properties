releaseInfo.summary=全てのGitリポジトリに互換性があり、より高速、安全、汎用的なコードプルを実現
releaseInfo.versionInfo.publisher=BlueKing
releaseInfo.description=checkoutプラグインは藍盾プラットフォームに基本的なgitプル操作を提供し、全てのgitリポジトリのプルが可能です\n\
## プラグイン機能\n\
- 藍盾にインポートされたコードリポジトリID/エイリアスに基づくコードプルをサポート\n\
- gitリポジトリURLに基づくコードプルをサポート\n\
- 指定したブランチ/tag/commitのプルをサポート\n\
- ファイルを指定したパスにプルすることをサポート\n\
- submoduleのプルをサポート\n\
- lfsファイルのプルをサポート\n\
- 浅いクローンと部分的なクローンをサポート\n\
- pre-mergeをサポート：pr/mrイベントがトリガーされた場合、ビルドマシン上でソースブランチとターゲットブランチをmergeします\n\
\n\
## 使用説明\n\
### 入力パラメータ\n\
#### コードリポジトリ\n\
- コードリポジトリで選択：藍盾のコードリポジトリリストからgitタイプのリポジトリを選択\n\
- コードリポジトリエイリアスで入力：藍盾のコードリポジトリエイリアスを入力（変数をサポート）、藍盾のコードリポジトリは事前に作成する必要があります\n\
- リポジトリURLで入力：gitリポジトリのURLを入力（例：https://github.com/TencentBlueKing/ci-git-checkout.git）\n\
\n\
#### 認証タイプ\n\
認証タイプは[コードリポジトリ]入力パラメータで「リポジトリURLで入力」を選択した場合のみ入力が必要です\n\
- なし：プルするリポジトリに資格情報が不要（例：githubのオープンソースリポジトリのプル）\n\
- 資格情報：[コードリポジトリ資格情報]を選択する必要があり、事前に[資格情報管理]ページで資格情報を作成する必要があります\n\
1. git URLがhttp/httpsタイプの場合、[ユーザー名+パスワード]、[ユーザー名パスワード+プライベートtoken]、[AccessToken]タイプを作成できます\n\
2. git URLがssh/gitタイプの場合、[SSH秘密鍵]、[SSH秘密鍵+プライベートtoken]タイプを作成できます\n\
- access token：[access token]入力欄にaccess tokenの値を入力\n\
1. githubのaccess tokenはhttps://github.com/settings/tokensページで作成できます\n\
2. gitlabのaccess tokenはhttps://gitlab.com/-/profile/personal_access_tokensページで作成できます（プライベートのgitlabは対応するサービスページで申請してください）\n\
- username/password：[username]と[password]入力欄にユーザー名とパスワードを入力（この方法は推奨されません。ユーザー名とパスワードの場合は、資格情報管理に保存し、その後資格情報を参照して使用することを推奨します）\n\
\n\
#### 指定したプル方法\n\
- BRANCH：ブランチに基づいてプル、[ブランチ/TAG/COMMIT]入力欄にプルするブランチを入力\n\
- TAG：tagに基づいてプル、[ブランチ/TAG/COMMIT]入力欄にプルするtagを入力\n\
- COMMIT_ID：commitIdに基づいてプル、[ブランチ/TAG/COMMIT]入力欄にプルするcommitIdを入力\n\
\n\
#### コード保存パス\n\
コードを指定したパスにプルします\n\
注意：\n\
1. ワークスペース以下にのみプル可能です。絶対パスを入力した場合でもワークスペース以下にプルされます（例：ワークスペースが/data/landun/workspaceで、/tmpを入力した場合、最終的に/data/landun/workspace/tmpディレクトリ以下にプルされます）\n\
2. 同じjobで複数のコードリポジトリをプルする場合、この設定を通じてコードの上書きを回避できます\n\
#### プル戦略\n\
- Revert Update：インクリメンタル、毎回先に"git reset --hard HEAD"を実行し、次に"git pull"を実行\n\
- Fresh Checkout：フル、毎回完全に新しくコードをcloneし、事前にワークスペース全体を削除します\n\
- Increment Update：インクリメンタル、"git pull"のみ使用し、競合や履歴キャッシュファイルをクリアしません\n\
### 出力パラメータ\n\
プラグインが正常に実行された後、今回プルしたコードリポジトリの情報が出力され、後続のプラグインでコンテキスト${{jobs.xxx.steps.xxx.変数名}}を通じて参照できます\n\
\n\
| 変数名 | 説明 |
| --- | --- |
| BK_CI_GIT_REPO_URL | コードリポジトリのURL |
| BK_CI_GIT_REPO_ALIAS_NAME | コードリポジトリのエイリアス |
| BK_CI_GIT_REPO_NAME | コードリポジトリのプロジェクト名（例：コードリポジトリのURLがhttps://github.com/TencentBlueKing/ci-git-checkout.gitの場合、値はTencentBlueKing/ci-git-checkoutとなります） |
| BK_CI_GIT_REPO_REF | ブランチ/TAG/COMMITの値 |
| BK_CI_GIT_REPO_CODE_PATH | コード保存パスの値 |
| BK_CI_GIT_REPO_LAST_COMMIT_ID | コードをプルする際、前回ビルドの最後のcommit id |
| BK_CI_GIT_REPO_HEAD_COMMIT_ID | コードをプルする際、今回ビルドの最後のcommit id（ビルドマシン上の最新のcommitId） |
| BK_CI_GIT_REPO_HEAD_COMMIT_COMMENT | コードをプルする際、今回ビルドの最後のcommitのコメント |
| BK_CI_GIT_REPO_HEAD_COMMIT_AUTHOR | 今回生成された新しいauthor |
| BK_CI_GIT_REPO_HEAD_COMMIT_COMMITTER | 今回生成された新しいcommitter |
| BK_CI_GIT_REPO_MR_TARGET_HEAD_COMMIT_ID | pre merge時、ターゲットブランチの最新のcommitId |
| BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_ID | pre merge時、ソースブランチの最新のcommitId |\n\
## シナリオ\n\
checkoutプラグインはgitlabイベントトリガー、githubイベントトリガー、tgitイベントトリガーと組み合わせて使用できます。組み合わせる前提条件は、トリガーされたコードリポジトリとプルするコードリポジトリのURLが同一であることです\n\
1. pushによるトリガー、トリガーされたブランチのプル\n\
[ブランチ/TAG/COMMIT]入力欄の値に${{BK_CI_REPO_GIT_WEBHOOK_BRANCH}}を入力\n\
2. mrによるトリガー、perMergeの有効化\n\
プラグインでpre-mergeを有効化（デフォルトで有効化されています）、自動的にソースブランチをターゲットブランチにマージします\n\
3. mrによるトリガー、ソースブランチのみプル\n\
プラグインでper-merge機能を無効化し、[ブランチ/TAG/COMMIT]入力欄の値に${{BK_CI_REPO_GIT_WEBHOOK_SOURCE_BRANCH}}を入力\n\
\n\
## 使用制限と制限解除ソリューション\n\
1. ビルドマシンまたはイメージにはgitが事前にインストールされている必要があります\n\
\n\
## よくある失敗原因と解決策\n\
1. ssh方式でコードをプルする際、Host key verification failed. fatal: Could not read from remote repository.のエラーが発生した場合。公開鍵と秘密鍵が正しいことを確認した上で、ビルドマシンの~/.ssh/configに以下を追加\n\
```shell\n\
# xxxはプルするコードリポジトリのドメイン名\n\
Host xxx\n\
StrictHostKeyChecking no\n\
```\n\
イメージの場合、イメージの修正が困難な場合は、プラグインの前にbashプラグインを追加し、以下を入力\n\
```shell\n\
mkdir ~/.ssh\n\
# xxxをプルするコードリポジトリのドメイン名に置換してください\n\
echo -e "Host xxx\nStrictHostKeyChecking no\n"> ~/.ssh/config\n\
```\n\
2. gitのよくあるFAQは以下を参照\n\
[Gitプラグインのよくあるエラーと解決策](https://github.com/TencentBlueKing/ci-git-checkout/wiki/Git%E6%8F%92%E4%BB%B6%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95)
inputGroups[1].label=サブモジュール
inputGroups[4].label=設定
input.repositoryType.label=コードリポジトリ
input.repositoryType.desc=値はID/NAME/URL
input.selfDesc.tipStr=コードリポジトリのプッシュイベント、マージリクエストイベント、Tagイベントでトリガーされたパイプラインは、この方法を使用できます。<br>- コードリポジトリのプッシュイベントでトリガーされた場合、プッシュされたcommit idをプルします。<br>- マージリクエストイベントでトリガーされた場合、ソースブランチをプルします（Pre-Mergeなどの戦略を実行するかどうかは、以下の設定項目で決定します）。<br>- Tagイベントでトリガーされた場合、対応するTagをプルします。<br>- その他のイベントでトリガーされた場合、トリガーしたリポジトリのデフォルトブランチをプルします。
input.repositoryType.list[0].label=コードリポジトリで選択
input.repositoryType.list[1].label=コードリポジトリのエイリアスで入力
input.repositoryType.list[2].label=リポジトリURLで入力
input.repositoryType.list[3].label=ビルドをトリガーしたコードリポジトリをプル
input.repositoryHashId.label=
input.repositoryHashId.placeholder=コードリポジトリ名を選択してください
input.repositoryHashId.optionsConf.itemText=関連付けられたコードリポジトリ
input.repositoryName.label=
input.repositoryName.desc=リポジトリエイリアス
input.repositoryName.placeholder=コードリポジトリのエイリアスを入力してください
input.repositoryUrl.label=
input.repositoryUrl.placeholder=コードリポジトリのURLを入力してください
input.authType.label=認証タイプ
input.authType.options[0].name=なし
input.authType.options[1].name=資格情報
input.authType.options[2].name=アクセストークン
input.authType.options[3].name=username/password
input.authType.options[4].name=パイプライン起動者トークン
input.authType.options[5].name=工蜂 Personal access token
input.ticketId.label=コードリポジトリの資格情報
input.ticketId.placeholder=対応する資格情報を選択してください
input.ticketId.optionsConf.itemText=新しい資格情報を追加
input.accessToken.label=access token
input.accessToken.placeholder=対応するaccess tokenを入力してください
input.personalAccessToken.label=工蜂personal_access_token
input.personalAccessToken.placeholder=対応するpersonal_access_tokenを入力してください
input.username.placeholder=ユーザー名を入力してください
input.password.placeholder=パスワードを入力してください
input.persistCredentials.text=資格情報を永続化する
input.persistCredentials.desc=現在のJobの後続のステップでGitの資格情報を使用する必要がある場合は、永続化してください。資格情報は現在のリポジトリのみ有効です。
input.pullType.label=プル方法を指定
input.refName.label=ブランチ/TAG/COMMIT
input.refName.placeholder=入力してください
input.localPath.label=コード保存パス
input.localPath.placeholder=ワークスペースの相対ディレクトリを入力してください。入力しない場合、デフォルトはワークスペースディレクトリです
input.localPath.desc=現在のJobに複数のコードプルステップがある場合は、このフィールドを設定して、コード保存パスの競合を解決してください。
input.strategy.label=プル戦略
input.strategy.desc=Revert Update: インクリメンタル。毎回「git reset --hard HEAD」を実行し、次に「git pull」を実行します。\n\nFresh Checkout: フル。毎回新規にコードをcloneし、事前にワークスペース全体を削除します。\n\nIncrement Update: インクリメンタル。「git pull」のみを使用し、競合や履歴キャッシュファイルをクリアしません。
input.fetchTip.tipStr=後続で「腾讯代码分析」プラグインを使用する場合は、depth値/部分クローン機能を設定しないでください。そうしないと、問題担当者の割り当てなどの機能に影響を及ぼします。
input.fetchDepth.label=git fetchのdepthパラメータ値
input.fetchOnlyCurrentRef.text=現在設定されているブランチのみfetch
input.fetchOnlyCurrentRef.desc=デフォルトでは、リモートからすべてのブランチを取得します。設定後、現在のブランチのみをfetchします。後続でプラグインでブランチを切り替える必要がある場合は、プラグインがブランチをfetchしてから切り替える必要があります。
input.enableFetchRefSpec.text=指定したブランチのfetchを有効にする
input.enableFetchRefSpec.desc=デフォルトでは、すべてのブランチをプルします。有効にすると、指定したブランチのみをプルします。設定したブランチは常にプルされます。
input.fetchRefSpec.placeholder=ブランチ名を入力してください。複数の場合はコンマで区切り、ワイルドカードをサポートします。入力しない場合、デフォルトでプラグインが設定したブランチをプルします。
input.fetchRefSpec.desc=プラグインで設定したブランチは設定する必要がなく、デフォルトで設定されます。設定したブランチは存在していなければなりません。そうでないと、エラーが発生します。
input.enablePartialClone.text=部分クローンを有効にする
input.enablePartialClone.desc=部分クローンには、Gitバージョン2.22.0より高い必要があります。部分クローンを使用する場合、チェックアウトディレクトリを指定することをお勧めします。これにより、パフォーマンスが向上します。部分クローンとdepthは同時に使用できません。部分クローンを有効にすると、depthが無効になります。
input.enableSparseCone.text=sparse coneモードを有効化する
input.enableSparseCone.desc=sparse coneモードのGitバージョンは2.25.0以上である必要があります。デフォルトではルートディレクトリのファイルのみをプルし、有効化後は「コードリポジトリ内の以下のパスをプル」においてワイルドカードの入力はサポートされず、ディレクトリ階層によるプルのみがサポートされます。
input.includePath.label=コードリポジトリ内の以下のパスをプル
input.includePath.placeholder=コードリポジトリの相対ディレクトリを入力してください。複数の場合はコンマで区切ります
input.excludePath.label=コードリポジトリ内の以下のパスを除外
input.excludePath.placeholder=コードリポジトリの相対ディレクトリを入力してください。複数の場合はコンマで区切ります
input.cachePath.label=アーカイブされたキャッシュパス
input.cachePath.desc=アーカイブされたキャッシュパスを入力してください。フルプル時は、まずアーカイブされたファイルをプルし、次にインクリメンタルプルを実行します。ファイルはtar.gz形式である必要があります。
input.enableGitLfs.text=Git Lfsを有効にする
input.enableGitLfs.desc=選択すると、git lfs pullが実行されます
input.enableGitLfsClean.text=Git Lfsのクリーンアップを有効にする
input.enableGitLfsClean.desc=選択すると、git lfs pruneが実行され、コードプルの効率に影響を及ぼします
input.lfsConcurrentTransfers.label=LFS同時プル数
input.lfsConcurrentTransfers.desc=デフォルト値：8
input.enableSubmodule.text=Submoduleを有効にする
input.enableSubmodule.desc=チェックすると外部リンクが有効になり、チェックを外すと無効になります
input.submodulePath.placeholder=プルするSubmoduleのpathを入力してください。複数の場合はコンマで区切ります。入力しない場合、デフォルトですべてのSubmoduleをプルします。
input.enableSubmoduleRemote.text=git submodule updateの後に--remoteパラメータを追加する
input.enableSubmoduleRecursive.text=git submodule updateの後に--recursiveパラメータを追加する
input.submoduleJobs.label=Submodule同時プル数
input.submoduleJobs.desc=デフォルト値は同時プルを有効にしません
input.submoduleDepth.label=submodule depthパラメータ値
input.enableVirtualMergeBranch.text=MRイベントでトリガーされた場合、Pre-Mergeを実行する
input.enableVirtualMergeBranch.desc=MRイベントでトリガーされた場合、ソースブランチをターゲットブランチにマージしようとします。競合が発生した場合、直接失敗と判定されます。
input.enableServerPreMerge.text=サーバーサイドプレマージを有効化
input.enableServerPreMerge.desc=サーバーサイドでプレマージを実行し、マージ後のコンテンツを直接取得
input.enableGitClean.text=Git Cleanを有効にする
input.enableGitClean.desc=選択すると、バージョン管理されていないファイルが削除されます。.gitignoreに設定されたファイルとディレクトリは除外されます（git clean -df）
input.enableGitCleanIgnore.text=バージョン追跡されていないignoredファイルをクリーンアップする
input.enableGitCleanIgnore.desc=git cleanコマンドに-xパラメータを追加します（git clean -x）
input.enableGitCleanNested.text=バージョン追跡されていないネストリポジトリをクリーンアップする
input.enableGitCleanNested.desc=git cleanに2つのfを使用します（git clean -ff）。サブモジュールを削除する場合、ワークスペースのサブモジュールディレクトリはデフォルトでは削除されません。これを有効にすると、削除されます。
input.autoCrlf.label=AutoCrlf設定値
input.enableTrace.text=デバッグを有効にする
input.enableTrace.desc=有効にすると、デバッグログが出力されます。プラグインが正常に動作している場合は、無効にすることをお勧めします。
input.setSafeDirectory.text=セーフディレクトリを設定する
input.setSafeDirectory.desc=選択すると、`git config --global --add safe.directory <path>`が実行され、コード保存パスをグローバル設定のセーフディレクトリに設定します。
input.mainRepo.text=ソース材料のメインリポジトリですか
input.mainRepo.desc=設定すると、ソース材料の表示時に、ソース材料のメインリポジトリが優先的に表示されます。
input.enableTGitCache.text=工蜂キャッシュ加速を有効にする
input.enableTGitCache.desc=工蜂エッジ Cache は、CI 環境および分散チームの近くにリポジトリデータを提供することで、Git が長距離ネットワークリンクを介して同じ Git データを複数回伝送して複数のクライアントにサービスを提供する必要がなくなります。http/https プロトコルのみをサポートし、ssh はサポートしていません。git のバージョンは 2.18.0 以上である必要があります
input.usernameConfig.label=user.name設定
input.usernameConfig.desc=git config user.name
input.userEmailConfig.label=user.email設定
input.userEmailConfig.desc=git config user.email
output.BK_CI_GIT_REPO_URL.description=コードリポジトリのURL
output.BK_CI_GIT_REPO_ALIAS_NAME.description=コードリポジトリのエイリアス。「コードリポジトリで選択」または「コードリポジトリのエイリアスで入力」を選択した場合のみ有効です。
output.BK_CI_GIT_REPO_NAME.description=コードリポジトリのプロジェクト名
output.BK_CI_GIT_REPO_REF.description=現在のコードリポジトリのREF、ブランチ/TAG/COMMITの値
output.BK_CI_GIT_REPO_CODE_PATH.description=現在のコードリポジトリのローカル保存パス
output.BK_CI_GIT_REPO_LAST_COMMIT_ID.description=コードをプルする際、前回ビルドの最後のcommit id
output.BK_CI_GIT_REPO_MR_TARGET_HEAD_COMMIT_ID.description=コードをプルする際、ターゲットブランチのcommitId。MRイベントでトリガーされ、pre-merge機能が有効になっている場合のみ有効です。
output.BK_CI_GIT_REPO_HEAD_COMMIT_ID.description=コードをプルする際、今回ビルドの最後のcommit id。pre-mergeが有効になっている場合、マージ後のcommitIdです。
output.BK_CI_GIT_REPO_HEAD_COMMIT_COMMENT.description=コードをプルする際、今回ビルドの最後のcommitのコメント
output.BK_CI_GIT_REPO_HEAD_COMMIT_AUTHOR.description=今回生成された新しいauthor
output.BK_CI_GIT_REPO_HEAD_COMMIT_COMMITTER.description=今回生成された新しいcommitter
output.BK_CI_GIT_REPO_COMMITS.description=今回生成された新しいcommit id
output.BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_ID.description=MRマージ前のソースブランチのcommitId
output.BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_COMMENT.description=MRマージ前のソースブランチのコミット情報
