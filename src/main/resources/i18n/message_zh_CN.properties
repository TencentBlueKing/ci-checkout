releaseInfo.summary=兼容所有Git仓库，更快、更安全、更通用拉取代码
releaseInfo.versionInfo.publisher=BlueKing
releaseInfo.description=checkout插件为蓝盾平台提供基本的git拉取操作，可以拉取所有的git仓库\n\
## 插件功能\n\
- 支持根据导入蓝盾的代码库ID/别名拉取代码\n\
- 支持根据git仓库url拉取代码\n\
- 支持拉取指定的分支/tag/commit\n\
- 支持拉取文件到指定的路径\n\
- 支持拉取submodule\n\
- 支持拉取lfs文件\n\
- 支持浅克隆和部分克隆\n\
- 支持pre-merge: 当pr/mr事件触发时,会在构建机上将源分支和目标分支进行merge\n\
## 使用说明\n\
### 入参\n\
#### 代码库\n\
- 按代码库选择: 从蓝盾代码库列表中选择git类型的仓库\n\
- 按代码库别名输入: 蓝盾代码库别名,支持变量,蓝盾代码库必须先创建\n\
  ![repository](images/repository.png)\n\
- 按仓库URL输入: 填写git仓库url,如https://github.com/TencentBlueKing/ci-git-checkout.git\n\
#### 授权类型\n\
授权类型只有在[代码库]入参选择'按仓库URL输入'才需要填写\n\
- 空: 拉取的仓库不需要凭证,如拉取github开源仓库\n\
- 凭证: 需选择[代码库凭证],需要先在[凭证管理]页面创建凭证\n\
  ![ticket](images/ticket.png)\n\
    1. 如果git url为http/https类型,则可以创建[用户名+密码]、[用户名密码+私有token]、[AccessToken]类型\n\
    2. 如果git url为ssh/git类型,则创建[SSH私钥]、[SSH私钥+私有token]类型\n\
- access token: [access token]输入框需填写access token的值\n\
    1. github的access token可以在https://github.com/settings/tokens 页面创建\n\
    2. gitlab的可以在https://gitlab.com/-/profile/personal_access_tokens 页面创建,私有的gitlab在对应的服务页面申请 \n\
- username/password: [username]和[password]输入框输入用户名密码,不建议此方式,如果是用户名密码，建议保存到凭证管理中,然后使用凭证引用\n\
#### 指定拉取方式\n\
- BRANCH: 按照分支拉取,[分支/TAG/COMMIT]输入框填写要拉取的分支\n\
- TAG: 按照tag拉取,[分支/TAG/COMMIT]输入框填写要拉取的tag\n\
- COMMIT_ID: 按照commitId拉取,[分支/TAG/COMMIT]输入框填写要拉取的commitId\n\
#### 代码保存路径\n\
将代码拉取到指定的路径\n\
注意:\n\
1. 只能拉取到工作空间下,如果填写的是绝对路径,也是拉取到工作空间下，如工作空间是/data/landun/workspace,填写的是/tmp,那么最终会拉取到/data/landun/workspace/tmp目录下\n\
2. 如果同job拉取多个代码库时，可以通过此项配置避免代码覆盖\n\
#### 拉取策略\n\
- Revert Update: 增量,每次先"git reset --hard HEAD",再"git pull"\n\
- Fresh Checkout: 全量,每次都会全新clone代码,之前会delete整个工作空间\n\
- Increment Update: 增量,只使用"git pull",并不清除冲突及历史缓存文件\n\
### 出参\n\
插件运行成功后，会输出本次拉取的代码库信息，可以在后续插件中通过上下文${{jobs.xxx.steps.xxx.变量名}}引用\n\
| 变量名 | 描述                                                                                                             |\n\
| --- |----------------------------------------------------------------------------------------------------------------|\n\
| BK_CI_GIT_REPO_URL | 代码库url                                                                                                         |\n\
| BK_CI_GIT_REPO_ALIAS_NAME | 代码库别名                                                                                                          |\n\
| BK_CI_GIT_REPO_NAME | 代码库项目名,如代码库url是<br/>https://github.com/TencentBlueKing/ci-git-checkout.git，那么值为TencentBlueKing/ci-git-checkout |\n\
| BK_CI_GIT_REPO_REF | 分支/TAG/COMMIT 的值                                                                                               |\n\
| BK_CI_GIT_REPO_CODE_PATH | 代码保存路径的值                                                                                                       |\n\
| BK_CI_GIT_REPO_LAST_COMMIT_ID        | 拉取代码时，上次构建最后的commit id                                                                                         |\n\
| BK_CI_GIT_REPO_HEAD_COMMIT_ID        | 拉取代码时，本次构建最后的commit id,构建机上最新的commitId                                                                         |\n\
| BK_CI_GIT_REPO_HEAD_COMMIT_COMMENT   | 拉取代码时，本次构建最后的commit注释                                                                                          |\n\
| BK_CI_GIT_REPO_HEAD_COMMIT_AUTHOR    | 本次产生的新的author                                                                                                  |\n\
| BK_CI_GIT_REPO_HEAD_COMMIT_COMMITTER | 本次产生的新的committer                                                                                               |\n\
| BK_CI_GIT_REPO_MR_TARGET_HEAD_COMMIT_ID | pre merge时，目标分支最新的commitId|\n\
| BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_ID | pre merge时,源分支最新的commitId |\n\
## 场景\n\
checkout插件可以跟gitlab事件触发、github事件触发、tgit事件触发配合使用,配合的前提时触发的代码库与拉取的代码库url相同\n\
1. push触发，拉取触发的分支\n\
   [分支/TAG/COMMIT]输入框的值填写${{BK_CI_REPO_GIT_WEBHOOK_BRANCH}}\n\
2. mr触发,开启perMerge\n\
  插件开启pre-merge,默认是开启的,会自动将源分支合并到目标分支\n\
3. mr触发,仅拉取源分支\n\
  插件关闭per-merge功能,[分支/TAG/COMMIT]输入框的值填写${{BK_CI_REPO_GIT_WEBHOOK_SOURCE_BRANCH}}\n\
## 使用限制和受限解决方案\n\
1. 构建机或镜像中必须已经安装git\n\
## 常见的失败原因和解决方案\n\
1. 使用ssh方式拉代码，出现Host key verification failed. fatal: Could not read from remote repository.错误，如果检查公私钥正确的情况下，在构建机中~/.ssh/config增加\n\
```shell\n\
# xxx是拉取的代码库域名\n\
Host xxx\n\
  StrictHostKeyChecking no\n\
```\n\
如果是在镜像中,镜像又不方便修改，可以在插件之前，增加bash插件，输入\n\
```shell\n\
mkdir ~/.ssh\n\
# xxx要替换成拉取的代码库域名\n\
echo -e "Host xxx\nStrictHostKeyChecking no\n" > ~/.ssh/config\n\
```\n\
2. git常见FAQ参考\n\
   [Git插件常见报错及解决办法](https://github.com/TencentBlueKing/ci-git-checkout/wiki/Git%E6%8F%92%E4%BB%B6%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95)\n\
## 安装\n\
[上架checkout插件](./install.md)
inputGroups[1].label=子模块
inputGroups[4].label=配置
input.repositoryType.label=代码库
input.repositoryType.desc=值为ID/NAME/URL
input.repositoryType.list[0].label=按代码库选择
input.repositoryType.list[1].label=按代码库别名输入
input.repositoryType.list[2].label=按仓库URL输入
input.repositoryHashId.label=
input.repositoryHashId.placeholder=请选择代码库名称
input.repositoryHashId.optionsConf.itemText=关联代码库
input.repositoryName.label=
input.repositoryName.placeholder=请输入代码库别名
input.repositoryUrl.label=
input.repositoryUrl.placeholder=请输入代码库URL
input.authType.label=授权类型
input.authType.options[0].name=空
input.authType.options[1].name=凭证
input.authType.options[2].name=Access token
input.authType.options[3].name=username/password
input.authType.options[4].name=流水线启动人token
input.authType.options[5].name=工蜂 Personal access token
input.ticketId.label=代码库凭证
input.ticketId.placeholder=请选中对应凭证
input.ticketId.optionsConf.itemText=添加新的凭证
input.accessToken.label=access token
input.accessToken.placeholder=请输入对应access token
input.personalAccessToken.label=工蜂personal_access_token
input.personalAccessToken.placeholder=请输入对应personal_access_token
input.username.placeholder=请输入用户名
input.password.placeholder=请输入密码
input.persistCredentials.text=是否持久化凭证
input.persistCredentials.desc=如果当前 Job 的后续步骤需要使用 Git 凭证，则持久化。凭证仅对当前仓库有效。
input.pullType.label=指定拉取方式
input.refName.label=分支/TAG/COMMIT
input.refName.placeholder=请输入
input.localPath.label=代码保存路径
input.localPath.placeholder=请填写工作空间相对目录，不填则默认为工作空间目录
input.localPath.desc=若当前 Job 有多个代码拉取步骤，请设置此字段以解决代码存储路径冲突问题
input.strategy.label=拉取策略
input.strategy.desc=Revert Update: 增量，每次先\"git reset --hard HEAD\"，再\"git pull\"\n\n Fresh Checkout: 全量，每次都会全新clone代码，之前会delete整个工作空间\n\n Increment Update: 增量，只使用\"git pull\"，并不清除冲突及历史缓存文件
input.fetchTip.tipStr=如果后续使用“腾讯代码分析”插件，请勿设置depth值/部分克隆功能，否则会影响问题处理人分配等功能。
input.fetchDepth.label=git fetch的depth参数值
input.fetchOnlyCurrentRef.text=仅fetch当前配置的分支
input.fetchOnlyCurrentRef.desc=默认从远端获取所有的分支，配置后只fetch当前分支，如果后续有插件需要切换分支，插件需要先fetch分支再切换
input.enableFetchRefSpec.text=启用拉取指定分支
input.enableFetchRefSpec.desc=默认会拉取所有分支，启用后只会拉取指定的分支，配置分支总是都会拉取
input.fetchRefSpec.placeholder=请填写分支名，多个以,分割，支持通配符，不填默认拉取插件配置的分支
input.fetchRefSpec.desc=插件配置的分支不需要设置，默认会设置。配置的分支必须存在，否则会报错
input.enablePartialClone.text=启动部分克隆
input.enablePartialClone.desc=部分克隆git版本必须高于2.22.0版本，使用部分克隆时，建议指定检出的目录，性能更好。部分克隆和depth不能同时用，开启部分克隆会把depth关闭
input.includePath.label=拉取代码库以下路径
input.includePath.placeholder=请填写代码库相对目录，多个用逗号分隔
input.excludePath.label=排除代码库以下路径
input.excludePath.placeholder=请填写代码库相对目录，多个用逗号分隔
input.cachePath.label=归档的缓存路径
input.cachePath.desc=输入归档的缓存路径，全量拉取时先拉取归档的文件，再增量拉取。文件必须是tar.gz格式
input.enableGitLfs.text=是否开启Git Lfs
input.enableGitLfs.desc=选中则执行git lfs pull
input.enableGitLfsClean.text=是否开启Git Lfs清理
input.enableGitLfsClean.desc=选中则执行git lfs prune，会影响代码拉取效率
input.lfsConcurrentTransfers.label=lfs并发拉取数
input.lfsConcurrentTransfers.desc=默认值：8
input.enableSubmodule.text=启用Submodule
input.enableSubmodule.desc=勾选则启用外链，不勾选则不启用
input.submodulePath.placeholder=请填写需拉取的Submodule path，多个用逗号分隔，不填默认拉所有Submodule
input.enableSubmoduleRemote.text=执行git submodule update后面是否带上--remote参数
input.enableSubmoduleRecursive.text=执行git submodule update后面是否带上--recursive参数
input.submoduleJobs.label=submodule并发拉取数
input.submoduleJobs.desc=默认值不启用并发拉取
input.submoduleDepth.label=submodule depth参数值
input.enableVirtualMergeBranch.text=MR事件触发时执行Pre-Merge
input.enableVirtualMergeBranch.desc=我们会在MR事件触发时尝试Merge源分支到目标分支，冲突将直接判定为失败
input.enableGitClean.text=是否开启Git Clean
input.enableGitClean.desc=选中删除未进行版本管理的文件，排除.gitignore中配置的文件和目录(git clean -df)
input.enableGitCleanIgnore.text=清理没有版本跟踪的ignored文件
input.enableGitCleanIgnore.desc=在git clean命令增加-x参数(git clean -x)
input.enableGitCleanNested.text=清理没有版本跟踪的嵌套仓库
input.enableGitCleanNested.desc=git clean使用两个f(git clean -ff)，当删除子模块时，工作空间子模块目录默认不会删除，启用后才会删除
input.autoCrlf.label=AutoCrlf配置值
input.enableTrace.text=是否开启调试
input.enableTrace.desc=开启后，会输出调试日志，插件运行正常建议关闭
output.BK_CI_GIT_REPO_URL.description=代码库的URL
output.BK_CI_GIT_REPO_ALIAS_NAME.description=代码库别名，只有选择`按代码库选择`或`按代码库别名输入`才有值
output.BK_CI_GIT_REPO_NAME.description=代码库的工程名称
output.BK_CI_GIT_REPO_REF.description=当前代码库REF，分支/TAG/COMMIT的值
output.BK_CI_GIT_REPO_CODE_PATH.description=当前代码库本地存放路径
output.BK_CI_GIT_REPO_LAST_COMMIT_ID.description=拉取代码时，上次构建最后的commit id
output.BK_CI_GIT_REPO_MR_TARGET_HEAD_COMMIT_ID.description=拉取代码时，目标分支的commitId，只有mr事件触发并启用pre-merge功能才有值
output.BK_CI_GIT_REPO_HEAD_COMMIT_ID.description=拉取代码时，本次构建最后的commit id，如果启用pre-merge，则是合并完后的commitId
output.BK_CI_GIT_REPO_HEAD_COMMIT_COMMENT.description=拉取代码时，本次构建最后的commit注释
output.BK_CI_GIT_REPO_HEAD_COMMIT_AUTHOR.description=本次产生的新的author
output.BK_CI_GIT_REPO_HEAD_COMMIT_COMMITTER.description=本次产生的新的committer
output.BK_CI_GIT_REPO_COMMITS.description=本次产生的新的commit id
output.BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_ID.description=MR合并之前源分支的commitId
output.BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_COMMENT.description=MR合并之前源分支的提交信息