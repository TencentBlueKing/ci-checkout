releaseInfo.summary=Compatible with all Git repositories, faster, safer, and more universal for code retrieval
releaseInfo.versionInfo.publisher=BlueKing
# plugin-description
releaseInfo.description=The checkout plugin provides basic git pull operations for the BK-CI platform, and can pull all git repositories.\n\
## Plugin function\n\
- Support pulling code based on the code base ID/alias imported into BK-CI.\n\
- Support pulling code according to git warehouse url.\n\
- Support pulling the specified branch/tag/commit.\n\
- Support pulling files to the specified path.\n\
- Support pulling submodule.\n\
- Support pulling lfs files.\n\
- Support shallow clone and partial clone.\n\
- Support pre-merge: when the pr/mr event is triggered, the source branch and the target branch will be merged on the build machine.\n\
## Instructions for use\n\
### Parameter Input\n\
#### Repository\n\
- Select by repository: select a repository of type git from the BK-CI  code base list.\n\
- Input by repository alias: BK-CI repository alias, support variables, BK-CI repository must be created first.\n\
  ![repository_en](images/repository_en.png)\n\
- Enter by repository URL: fill in the git repository URL, such as https://github.com/TencentBlueKing/ci-git-checkout.git\n\
#### Authorization Type\n\
The authorization type needs to be filled in only when [Repository] input parameter selects 'Enter by repository URL'\n\
- Empty: The pulled repository does not require credentials, such as pulling the github open source repository.\n\
- Credentials: You need to select [Repository Credentials], and you need to create a credential on the [Certificate Management] page first.\n\
  ![ticket_en](images/ticket_en.png)\n\
    1. If the git url is http/https type, you can create [username + password], [username password + private token], [AccessToken] type\n\
    2. If the git url is ssh/git type, create [SSH private key], [SSH private key + private token] type\n\
- access token: [access token] input box needs to fill in the value of access token\n\
    1. The access token of github can be created on the https://github.com/settings/tokens page\n\
    2. Gitlab can be created on the https://gitlab.com/-/profile/personal_access_tokens page, and private gitlab can be applied on the corresponding service page\n\
- username/password: Enter the username and password in the [username] and [password] input boxes. This method is not recommended. If it is a username and password, it is recommended to save it in the credential management, and then use the credential reference\n\
#### Specify the pull method\n\
- BRANCH: Pull according to the branch, fill in the branch to be pulled in the [Branch/TAG/COMMIT] input box\n\
- TAG: pull by tag, [branch/TAG/COMMIT] input box fill in the tag to be pulled\n\
- COMMIT_ID: pull according to commitId, [branch/TAG/COMMIT] input box fills in the commitId to be pulled\n\
#### Code storage path\n\
Pull the code to the specified path\n\
Notice:\n\
1. It can only be pulled to the workspace. If the absolute path is filled in, it will also be pulled to the workspace. For example, if the workspace is /data/landun/workspace, and /tmp is filled in, then it will eventually be pulled to / data/landun/workspace/tmp directory.\n\
2. If the same job pulls multiple code bases, you can avoid code coverage through this configuration.\n\
#### Pull strategy\n\
- Revert Update: increment, first "git reset --hard HEAD" each time, then "git pull"\n\
- Fresh Checkout: full amount, each time will be a new clone code, before the entire workspace will be deleted\n\
- Increment Update: increment, only use "git pull", does not clear conflicts and historical cache files\n\
### Output parameters\n\
After the plugin runs successfully, it will output the repository information pulled this time, which can be referenced in subsequent plugins through the context ${{jobs.xxx.steps.xxx.variable name}}\n\
| Variable Name | Describe                                                                                                             |\n\
| --- |----------------------------------------------------------------------------------------------------------------|\n\
| BK_CI_GIT_REPO_URL | Repository url                                                                                                         |\n\
| BK_CI_GIT_REPO_ALIAS_NAME | Repository alias                                                                                                          |\n\
| BK_CI_GIT_REPO_NAME | Repository project name, if  the repository url is <br/>https://github.com/TencentBlueKing/ci-git-checkout.git, then the value is TencentBlueKing/ci-git-checkout |\n\
| BK_CI_GIT_REPO_REF | Value of branch/TAG/COMMIT                                                                                               |\n\
| BK_CI_GIT_REPO_CODE_PATH | The value of the code save path                                                                                                       |\n\
| BK_CI_GIT_REPO_LAST_COMMIT_ID        | When pulling the code, the last commit id of the last build                                                                                         |\n\
| BK_CI_GIT_REPO_HEAD_COMMIT_ID        | When pulling the code, the last commit id of this build, the latest commitId on the build machine                                                                        |\n\
| BK_CI_GIT_REPO_HEAD_COMMIT_COMMENT   | When pulling the code, the last commit comment of this build                                                                                          |\n\
| BK_CI_GIT_REPO_HEAD_COMMIT_AUTHOR    | The new author generated this time                                                                                                  |\n\
| BK_CI_GIT_REPO_HEAD_COMMIT_COMMITTER | The new committer generated this time                                                                                             |\n\
| BK_CI_GIT_REPO_MR_TARGET_HEAD_COMMIT_ID | When pre merge, the target branch is the latestcommitId|\n\
| BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_ID | When pre merge, the latest commitId of the source branch|\n\
## Scenes\n\
The checkout plug-in can be used in conjunction with gitlab event triggering, github event triggering, and tgit event triggering. The premise of the cooperation is that the triggered repository is the same as the pulled repository url.\n\
1. Push trigger, pull trigger branch\n\
   [Branch/TAG/COMMIT] Fill in the value of the input box ${{BK_CI_REPO_GIT_WEBHOOK_BRANCH}}\n\
2. Mr trigger, open perMerge\n\
   The plugin enables pre-merge, which is enabled by default, and will automatically merge the source branch into the target branch\n\
3. Mr trigger, only pull the source branch\n\
   The plugin closes the per-merge function, and fills in the value of the [branch/TAG/COMMIT] input box${{BK_CI_REPO_GIT_WEBHOOK_SOURCE_BRANCH}}\n\
## Using Restricted and Restricted Solutions\n\
1. Git must have been installed on the build machine or mirror\n\
## Common Failure Causes and Solutions\n\
1. Use the ssh method to pull the code, and the Host key verification failed. fatal: Could not read from remote repository. error appears. If the public and private keys are correct, add them to ~/.ssh/config in the build machine.\n\
```shell\n\
# xxx is the domain name of the pulled repository\n\
Host xxx\n\
  StrictHostKeyChecking no\n\
```\n\
If it is in the mirror, and the mirror is inconvenient to modify, you can add the bash plugin before the plugin, enter\n\
```shell\n\
mkdir ~/.ssh\n\
# xxx should be replaced with the domain name of the pulled repository\n\
echo -e "Host xxx\nStrictHostKeyChecking no\n" > ~/.ssh/config\n\
```\n\
2. git common FAQ reference\n\
   [Common errors and solutions for Git plugins](https://github.com/TencentBlueKing/ci-git-checkout/wiki/Git%E6%8F%92%E4%BB%B6%E5%B8%B8%E8%A7%81%E6%8A%A5%E9%94%99%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95)\n\
## Install\n\
[Add checkout plugin](./install.md)
inputGroups[1].label=Submodule
inputGroups[4].label=Configration
input.repositoryType.label=Repository
input.repositoryType.desc=Based on input method, Filed value is ID or Alias Name or URL
input.repositoryType.list[0].label=Select Repository
input.repositoryType.list[1].label=Enter by Repository Alias Name
input.repositoryType.list[2].label=Enter by Repository URL
input.repositoryHashId.label=
input.repositoryHashId.placeholder=Please Select Repository ID
input.repositoryHashId.optionsConf.itemText=Repository Association
input.repositoryName.label=
input.repositoryName.desc=Repository Alias Name
input.repositoryName.placeholder=Please enter repository alias name
input.repositoryUrl.label=
input.repositoryUrl.placeholder=Please enter repository url
input.authType.label=Authorization Type
input.authType.options[0].name=Empty
input.authType.options[1].name=Ticket
input.authType.options[2].name=Access token
input.authType.options[3].name=Username/password
input.authType.options[4].name=Start user token
input.authType.options[5].name=GIT personal_access_token
input.ticketId.label=Repository Tickct
input.ticketId.placeholder=Please Select Ticket ID
input.ticketId.optionsConf.itemText=Add New Ticket
input.accessToken.label=Access token
input.accessToken.placeholder=Please insert access token
input.personalAccessToken.label=Git personal_access_token
input.personalAccessToken.placeholder=Please insert personal_access_token
input.username.placeholder=Please insert username
input.password.placeholder=Please insert password
input.persistCredentials.text=Persist the credential for subsequent steps of the current job
input.persistCredentials.desc=If the Git credential is required for subsequent steps of the current job, then persist it. The credential is only valid for the current repository.
input.pullType.label=Checkout by
input.refName.label=BRANCH/TAG/COMMIT
input.refName.placeholder=Please insert
input.localPath.label=Directory for storing code
input.localPath.placeholder=Relative path to the workspace. Default is the root directory of the workspace
input.localPath.desc=If the current job has multiple code pull steps, please set this field to resolve code path conflicts.
input.strategy.label=Checkout Strategy
input.strategy.desc=Revert Update: For incremental update, Fisrt \"git reset --hard HEAD\", then \"git pull\"\n\n Fresh Checkout: For full volume update, then whole workspace will be deleted and clone new codes\n\n Increment Update: Incremental Update, only use \"git pull\", and will not clean crashes and history cache file
input.fetchDepth.label=The depth parameter value of git fetch
input.fetchOnlyCurrentRef.text=Only fetch the currently configured branch
input.fetchOnlyCurrentRef.desc=By default, all branches are obtained from the remote end. After configuration, only the current branch is fetched. If there is a plug-in that needs to switch branches later, the plug-in needs to fetch the branch first and then switch
input.enableFetchRefSpec.text=Enable pull specified branches
input.enableFetchRefSpec.desc=By default, all branches will be pulled. When enabled, only the specified branch will be pulled
input.fetchRefSpec.placeholder=Please fill in the branch name(s), multiple splits with ',', wildcards allowed. If left blank, the the plugin configuration's default branch will be fetched
input.fetchRefSpec.desc=The branch of the plug-in configuration does not need to be set, it will be set by default. The configured branch must exist, otherwise an error will be reported
input.enablePartialClone.text=Enable partial clone
input.enablePartialClone.desc=The git version of partial clone must be higher than version 2.22.0. When using partial clone, it is recommended to specify the checkout directory for better performance. Partial cloning and depth cannot be used at the same time, enabling partial cloning will turn off depth
input.includePath.label=The repository pulls relative subpaths
input.includePath.placeholder=Please fill in the relative directory of the repository, multiple separated by commas
input.excludePath.label=Exclude the following paths from the repository
input.excludePath.placeholder=Please fill in the relative directory of the repository, multiple separated by commas
input.cachePath.label=Path to the archived cache
input.cachePath.desc=Enter the cache path of the archive. When pulling in full, first pull the archived file, and then pull it incrementally. The file must be in tar.gz format
input.enableGitLfs.text=Enable Git Lfs
input.enableGitLfs.desc=If selected, execute git lfs pull
input.enableGitLfsClean.text=Enable Git Lfs Clean
input.enableGitLfsClean.desc=Selecting this option will execute "git lfs prune", which can impact code retrieval efficiency
input.lfsConcurrentTransfers.label=LFS parallel pull count
input.lfsConcurrentTransfers.desc=Default value: 8
input.enableSubmodule.text=Enable Submodule
input.enableSubmodule.desc=Check it to enable the external link, and uncheck it to disable it
input.submodulePath.placeholder=Please enter submodel paths to pull, separated by ",". If empty, all submodels will be pulled by default
input.enableSubmoduleRemote.text=When executing 'git submodule update', include the '--remote' parameter.
input.enableSubmoduleRecursive.text=When executing 'git submodule update', include the '--recursive' parameter.
input.submoduleJobs.label=Number of parallel submodule pulls
input.submoduleJobs.desc=Concurrent submodule pulls disabled by default
input.submoduleDepth.label=Submodule depth
input.enableVirtualMergeBranch.text=Execute Pre-Merge when MR event is triggered
input.enableVirtualMergeBranch.desc=We will attempt to merge the source branch to the target branch when the MR event is triggered, If there is a conflict, the merge will fail immediately.
input.enableGitClean.text=Enable Git Clean
input.enableGitClean.desc=Select to delete files that are not under version management, and exclude files and directories configured in .gitignore (git clean -df)
input.enableGitCleanIgnore.text=Clean up the files and directories configured by .gitignore when git clean
input.enableGitCleanIgnore.desc=Add the -x parameter to the git clean command (git clean -xdf)
input.enableGitCleanNested.text=Clean up nested repositories without version tracking
input.enableGitCleanNested.desc=When using two f's (git clean -ff) with git clean, the submodule directory in the working space will not be deleted by default when removing a submodule, it will only be deleted if enabled
input.autoCrlf.label=Set AutoCrlf
input.enableTrace.text=Enable debugging
input.enableTrace.desc=After it is enabled, the debug log will be output, and it is recommended to disable it if the plug-in is running normally
output.BK_CI_GIT_REPO_URL.description=RepositoryURL
output.BK_CI_GIT_REPO_ALIAS_NAME.description=Repository Alias Name, only if you choose "Select Repository "or " Enter by Repository Alias Name" to have a value
output.BK_CI_GIT_REPO_NAME.description=Repository REPO NAME
output.BK_CI_GIT_REPO_REF.description=Current code repository REF, BRANCH/TAG/COMMIT values
output.BK_CI_GIT_REPO_CODE_PATH.description=Current Repository local storage path
output.BK_CI_GIT_REPO_LAST_COMMIT_ID.description=When pulling the code, the last commit id of the last build
output.BK_CI_GIT_REPO_MR_TARGET_HEAD_COMMIT_ID.description=When pulling the code, the commitId of the target branch has a value only when the mr event is triggered and the pre-merge function is enabled
output.BK_CI_GIT_REPO_HEAD_COMMIT_ID.description=When pulling the code, the last commit id of this build, if pre-merge is enabled, is the commitId after the merge
output.BK_CI_GIT_REPO_HEAD_COMMIT_COMMENT.description=When pulling the code, the last commit comment of this build
output.BK_CI_GIT_REPO_HEAD_COMMIT_AUTHOR.description=The new author generated this time
output.BK_CI_GIT_REPO_HEAD_COMMIT_COMMITTER.description=The new committer generated this time
output.BK_CI_GIT_REPO_COMMITS.description=The new commit id generated this time
output.BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_ID.description=Merge commitId from the source branch before merging
output.BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_COMMENT.description=Merge commit message from the source branch before merging