{
  "atomCode": "checkout",
  "defaultLocaleLanguage": "en_US",
  "execution": {
    "packagePath": "checkout.jar",
    "language": "java",
    "minimumVersion": "1.8",
    "demands": [],
    "target": "$bk_java_path -Dfile.encoding=utf8 -jar checkout.jar",
    "post": {
      "postEntryParam": "True",
      "postCondition": "always()"
    }
  },
  "releaseInfo": {
    "projectId": "demo",
    "name": "Checkout",
    "language": "java",
    "logoUrl": "${{indexFile(\"checkout.png\")}}",
    "category": "TASK",
    "classifyCode": "scm",
    "jobType": "AGENT",
    "os": [
      "LINUX",
      "MACOS",
      "WINDOWS"
    ],
    "labelCodes": [],
    "summary": "Compatible with all Git repositories, faster, safer, and more universal for code retrieval",
    "description": "${{indexFile(\"readme_en.md\")}}",
    "configInfo": {
      "frontendType": "NORMAL"
    },
    "versionInfo": {
      "publisher": "BlueKing",
      "releaseType": "NEW",
      "version": "1.0.0",
      "versionContent": "init"
    }
  },
  "inputGroups": [
    {
      "name": "fetch",
      "label": "Fetch",
      "isExpanded": true
    },
    {
      "name": "Submodule",
      "label": "Sub-Module",
      "isExpanded": true
    },
    {
      "name": "lfs",
      "label": "Lfs",
      "isExpanded": true
    },
    {
      "name": "merge",
      "label": "Merge",
      "isExpanded": true
    },
    {
      "name": "config",
      "label": "Configration",
      "isExpanded": true
    }
  ],
  "input": {
    "repositoryType": {
      "label": "Repository",
      "default": "ID",
      "desc": "Based on input method, Filed value is ID or Alias Name or URL",
      "type": "enum-input",
      "required": true,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "list": [
        {
          "label": "Select Repository",
          "value": "ID"
        },
        {
          "label": "Enter by Repository Alias Name",
          "value": "NAME"
        },
        {
          "label": "Enter by Repository URL",
          "value": "URL"
        }
      ]
    },
    "repositoryHashId": {
      "label": "",
      "default": "",
      "placeholder": "Please Select Repository ID",
      "type": "selector",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "optionsConf": {
        "searchable": true,
        "multiple": false,
        "url": "/repository/api/user/repositories/{projectId}/hasPermissionList?permission=USE&page=1&pageSize=5000",
        "paramId": "repositoryHashId",
        "paramName": "aliasName",
        "itemTargetUrl": "/codelib/{projectId}/",
        "itemText": "Repository Association",
        "hasAddItem": true
      },
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "ID"
          }
        ]
      }
    },
    "repositoryName": {
      "label": "",
      "default": "Repository Alias Name",
      "placeholder": "Please enter repository alias name",
      "type": "vuex-input",
      "desc": "Description",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "NAME"
          }
        ]
      }
    },
    "repositoryUrl": {
      "label": "Repository URL",
      "default": "",
      "placeholder": "Please insert Repository URL",
      "type": "vuex-input",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "URL"
          }
        ]
      }
    },
    "authType": {
      "label": "Authorization Type",
      "default": "TICKET",
      "type": "selector",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "options": [
        {
          "name": "Empty",
          "id": "EMPTY"
        },
        {
          "name": "Ticket",
          "id": "TICKET"
        },
        {
          "name": "Access token",
          "id": "ACCESS_TOKEN"
        },
        {
          "name": "Username/password",
          "id": "USERNAME_PASSWORD"
        },
        {
          "name": "Start user token",
          "id": "START_USER_TOKEN"
        },
        {
          "name": "GIT personal_access_token",
          "id": "PERSONAL_ACCESS_TOKEN"
        }
      ],
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "URL"
          }
        ]
      }
    },
    "ticketId": {
      "label": "Repository Tickct",
      "placeholder": "Please Select Ticket ID",
      "type": "select-input",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "URL"
          },
          {
            "key": "authType",
            "value": "TICKET"
          }
        ]
      },
      "optionsConf": {
        "searchable": true,
        "multiple": false,
        "url": "/ticket/api/user/credentials/{projectId}/hasPermissionList?permission=USE&page=1&pageSize=10000",
        "paramId": "credentialId",
        "paramName": "credentialId",
        "itemTargetUrl": "/ticket/{projectId}/",
        "itemText": "Add New Ticket",
        "hasAddItem": true
      }
    },
    "accessToken": {
      "label": "Access token",
      "placeholder": "Please insert access token",
      "type": "vuex-input",
      "inputType": "password",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": true,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "URL"
          },
          {
            "key": "authType",
            "value": "ACCESS_TOKEN"
          }
        ]
      }
    },
    "personalAccessToken": {
      "label": "Git personal_access_token",
      "placeholder": "Please insert personal_access_token",
      "type": "vuex-input",
      "inputType": "password",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": true,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "URL"
          },
          {
            "key": "authType",
            "value": "PERSONAL_ACCESS_TOKEN"
          }
        ]
      }
    },
    "username": {
      "label": "Username",
      "placeholder": "Please insert username",
      "type": "vuex-input",
      "inputType": "password",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "URL"
          },
          {
            "key": "authType",
            "value": "USERNAME_PASSWORD"
          }
        ]
      }
    },
    "password": {
      "label": "Password",
      "placeholder": "Please insert password",
      "type": "vuex-input",
      "inputType": "password",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": true,
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "repositoryType",
            "value": "URL"
          },
          {
            "key": "authType",
            "value": "USERNAME_PASSWORD"
          }
        ]
      }
    },
    "persistCredentials": {
      "label": "",
      "default": true,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Persist the credential for subsequent steps of the current job",
      "desc": "If the Git credential is required for subsequent steps of the current job, then persist it. The credential is only valid for the current repository.",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false
    },
    "pullType": {
      "label": "Checkout by",
      "default": "BRANCH",
      "type": "select-input",
      "required": false,
      "optionsConf": {
        "searchable": true
      },
      "options": [
        {
          "id": "BRANCH",
          "name": "BRANCH"
        },
        {
          "id": "TAG",
          "name": "TAG"
        },
        {
          "id": "COMMIT_ID",
          "name": "COMMIT_ID"
        }
      ]
    },
    "refName": {
      "label": "BRANCH/TAG/COMMIT",
      "default": "master",
      "placeholder": "Please insert",
      "type": "vuex-input",
      "desc": "",
      "required": true,
      "disabled": false,
      "hidden": false,
      "isSensitive": false
    },
    "localPath": {
      "label": "Directory for storing code",
      "default": "",
      "placeholder": "Relative path to the workspace. Default is the root directory of the workspace",
      "type": "vuex-input",
      "desc": "If the current job has multiple code pull steps, please set this field to resolve code path conflicts.",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false
    },
    "strategy": {
      "label": "Checkout Strategy",
      "default": "REVERT_UPDATE",
      "type": "enum-input",
      "desc": "Revert Update: For incremental update, Fisrt \"git reset --hard HEAD\", then \"git pull\"\n\n Fresh Checkout: For full volume update, then whole workspace will be deleted and clone new codes\n\n Increment Update: Incremental Update, only use \"git pull\", and will not clean crashes and history cache file",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "list": [
        {
          "label": "Revert Update",
          "value": "REVERT_UPDATE"
        },
        {
          "label": "Fresh Checkout",
          "value": "FRESH_CHECKOUT"
        },
        {
          "label": "Increment Update",
          "value": "INCREMENT_UPDATE"
        }
      ]
    },
    "fetchDepth": {
      "label": "The depth parameter value of git fetch",
      "default": "",
      "placeholder": "",
      "type": "vuex-input",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "fetch"
    },
    "fetchOnlyCurrentRef": {
      "label": "",
      "default": false,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Only fetch the currently configured branch",
      "desc": "By default, all branches are obtained from the remote end. After configuration, only the current branch is fetched. If there is a plug-in that needs to switch branches later, the plug-in needs to fetch the branch first and then switch",
      "required": false,
      "disabled": false,
      "hidden": true,
      "isSensitive": false,
      "groupName": "fetch"
    },
    "enableFetchRefSpec": {
      "label": "",
      "default": false,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Enable pull specified branches",
      "desc": "By default, all branches will be pulled. When enabled, only the specified branch will be pulled",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "fetch"
    },
    "fetchRefSpec": {
      "label": "",
      "default": "",
      "placeholder": "Please fill in the branch name(s), multiple splits with ',', wildcards allowed. If left blank, the the plugin configuration's default branch will be fetched",
      "type": "vuex-input",
      "desc": "The branch of the plug-in configuration does not need to be set, it will be set by default. The configured branch must exist, otherwise an error will be reported",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "fetch",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "enableFetchRefSpec",
            "value": true
          }
        ]
      }
    },
    "enablePartialClone": {
      "label": "",
      "default": false,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Enable partial clone",
      "desc": "The git version of partial clone must be higher than version 2.22.0. When using partial clone, it is recommended to specify the checkout directory for better performance. Partial cloning and depth cannot be used at the same time, enabling partial cloning will turn off depth",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "fetch"
    },
    "includePath": {
      "label": "The repository pulls relative subpaths",
      "default": "",
      "placeholder": "Please fill in the relative directory of the repository, multiple separated by commas",
      "type": "vuex-input",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "fetch",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "enablePartialClone",
            "value": true
          }
        ]
      }
    },
    "excludePath": {
      "label": "Path to the archived cache",
      "default": "",
      "placeholder": "Please fill in the relative directory of the repository, multiple separated by commas",
      "type": "vuex-input",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "fetch",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "enablePartialClone",
            "value": true
          }
        ]
      }
    },
    "cachePath": {
      "label": "Archive cache path",
      "default": "",
      "placeholder": "",
      "type": "vuex-input",
      "desc": "Enter the cache path of the archive. When pulling in full, first pull the archived file, and then pull it incrementally. The file must be in tar.gz format",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "fetch"
    },
    "enableGitLfs": {
      "label": "",
      "default": true,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Enable Git Lfs",
      "desc": "If selected, execute git lfs pull",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "lfs"
    },
    "enableGitLfsClean": {
      "label": "",
      "default": false,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Enable Git Lfs Clean",
      "desc": "Selecting this option will execute \"git lfs prune\", which can impact code retrieval efficiency",
      "required": true,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "lfs"
    },
    "enableSubmodule": {
      "label": "",
      "default": true,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Enable Submodule",
      "desc": "Check it to enable the external link, and uncheck it to disable it",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "submodule"
    },
    "submodulePath": {
      "label": "",
      "default": "",
      "placeholder": "Please enter submodel paths to pull, separated by \",\". If empty, all submodels will be pulled by default",
      "type": "vuex-input",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "submodule",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "enableSubmodule",
            "value": true
          }
        ]
      }
    },
    "enableSubmoduleRemote": {
      "label": "",
      "default": false,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "When executing 'git submodule update', include the '--remote' parameter.",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "submodule",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "enableSubmodule",
            "value": true
          }
        ]
      }
    },
    "enableSubmoduleRecursive": {
      "label": "",
      "default": true,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "When executing 'git submodule update', include the '--recursive' parameter.",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "submodule",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "enableSubmodule",
            "value": true
          }
        ]
      }
    },
    "submoduleJobs": {
      "label": "Number of parallel submodule pulls",
      "default": "",
      "placeholder": "",
      "type": "vuex-input",
      "desc": "Concurrent submodule pulls disabled by default",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "submodule",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "enableSubmodule",
            "value": true
          }
        ]
      }
    },
    "submoduleDepth": {
      "label": "Submodule depth",
      "default": "",
      "placeholder": "",
      "type": "vuex-input",
      "desc": "",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "submodule",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "enableSubmodule",
            "value": true
          }
        ]
      }
    },
    "enableVirtualMergeBranch": {
      "label": "",
      "default": true,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Execute Pre-Merge when MR event is triggered",
      "desc": "We will attempt to merge the source branch to the target branch when the MR event is triggered, If there is a conflict, the merge will fail immediately.",
      "required": true,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "merge"
    },
    "enableGitClean": {
      "label": "",
      "default": true,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Enable Git Clean",
      "desc": "Select to delete files that are not under version management, and exclude files and directories configured in .gitignore (git clean -df)",
      "required": true,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "config",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "strategy",
            "value": "REVERT_UPDATE"
          }
        ]
      }
    },
    "enableGitCleanIgnore": {
      "label": "",
      "default": true,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Clean up the files and directories configured by .gitignore when git clean",
      "desc": "Add the -x parameter to the git clean command (git clean -xdf)",
      "required": true,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "config",
      "rely": {
        "operation": "AND",
        "expression": [
          {
            "key": "strategy",
            "value": "REVERT_UPDATE"
          },
          {
            "key": "enableGitClean",
            "value": true
          }
        ]
      }
    },
    "usernameConfig": {
      "label": "user.name configuration value",
      "default": "",
      "placeholder": "",
      "type": "vuex-input",
      "desc": "git config user.name",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "config"
    },
    "userEmailConfig": {
      "label": "user.email configuration value",
      "default": "",
      "placeholder": "",
      "type": "vuex-input",
      "desc": "git config user.email",
      "required": false,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "config"
    },
    "autoCrlf": {
      "label": "Set AutoCrlf",
      "default": "false",
      "type": "select-input",
      "optionsConf": {
        "searchable": true
      },
      "groupName": "config",
      "options": [
        {
          "id": "false",
          "name": "false"
        },
        {
          "id": "true",
          "name": "true"
        },
        {
          "id": "input",
          "name": "input"
        }
      ]
    },
    "enableTrace": {
      "label": "",
      "default": false,
      "placeholder": "",
      "type": "atom-checkbox",
      "text": "Enable debugging",
      "desc": "After it is enabled, the debug log will be output, and it is recommended to disable it if the plug-in is running normally.",
      "required": true,
      "disabled": false,
      "hidden": false,
      "isSensitive": false,
      "groupName": "config"
    }
  },
  "output": {
    "BK_CI_GIT_REPO_URL": {
      "type": "string",
      "description": "RepositoryURL"
    },
    "BK_CI_GIT_REPO_ALIAS_NAME": {
      "type": "string",
      "description": "Repository Alias Name, only if you choose \"Select Repository \"or \" Enter by Repository Alias Name\" to have a value"
    },
    "BK_CI_GIT_REPO_NAME": {
      "type": "string",
      "description": "Repository REPO NAME"
    },
    "BK_CI_GIT_REPO_REF": {
      "type": "string",
      "description": "Current code repository REF, BRANCH/TAG/COMMIT values"
    },
    "BK_CI_GIT_REPO_CODE_PATH": {
      "type": "string",
      "description": "Current Repository local storage path"
    },
    "BK_CI_GIT_REPO_LAST_COMMIT_ID": {
      "type": "string",
      "description": "When pulling the code, the last commit id of the last build"
    },
    "BK_CI_GIT_REPO_MR_TARGET_HEAD_COMMIT_ID": {
      "type": "string",
      "description": "When pulling the code, the commitId of the target branch has a value only when the mr event is triggered and the pre-merge function is enabled"
    },
    "BK_CI_GIT_REPO_HEAD_COMMIT_ID": {
      "type": "string",
      "description": "When pulling the code, the last commit id of this build, if pre-merge is enabled, is the commitId after the merge"
    },
    "BK_CI_GIT_REPO_HEAD_COMMIT_COMMENT": {
      "type": "string",
      "description": "When pulling the code, the last commit comment of this build"
    },
    "BK_CI_GIT_REPO_HEAD_COMMIT_AUTHOR": {
      "type": "string",
      "description": "The new author generated this time"
    },
    "BK_CI_GIT_REPO_HEAD_COMMIT_COMMITTER": {
      "type": "string",
      "description": "The new committer generated this time"
    },
    "BK_CI_GIT_REPO_COMMITS": {
      "type": "string",
      "description": "The new commit id generated this time"
    },
    "BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_ID": {
      "type": "string",
      "description": "Merge commitId from the source branch before merging"
    },
    "BK_CI_GIT_REPO_MR_SOURCE_HEAD_COMMIT_COMMENT": {
      "type": "string",
      "description": "Merge commit message from the source branch before merging"
    }
  }
}